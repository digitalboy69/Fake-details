
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<style></style>
</head>
<body>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Fake Identity Generator</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 10px;
      transition: background 0.3s ease;
    }

    body.dark-mode {
      background: linear-gradient(135deg, #2c3e50 0%, #1a1a2b 100%);
      color: #e0e0e0;
    }

    .container {
      max-width: 700px;
      width: 100%;
      background: white;
      padding: 20px;
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      position: relative;
    }

    .dark-mode .container {
      background: #1e2a44;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
    }

    h1 {
      text-align: center;
      font-size: 1.8rem;
      margin-bottom: 15px;
      color: #333;
    }

    .dark-mode h1 {
      color: #e0e0e0;
    }

    .card {
      padding: 15px;
      background: #f9f9f9;
      border-radius: 12px;
      margin-bottom: 20px;
      display: grid;
      gap: 10px;
      max-height: 60vh;
      overflow-y: auto;
      width: 100%;
    }

    .dark-mode .card {
      background: #2a3b5a;
    }

    .data-box {
      background: #ffffff;
      padding: 10px;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      justify-content: space-between;
      align-items: center;
      word-break: break-word;
      width: 100%;
    }

    .dark-mode .data-box {
      background: #3b4a6b;
      border-color: #4a5b7b;
    }

    .data-box:hover {
      background: #e8f5e9;
      transform: scale(1.01);
    }

    .dark-mode .data-box:hover {
      background: #4a6b8b;
    }

    .data-box strong {
      color: #333;
      flex: 0 0 100px;
    }

    .dark-mode .data-box strong {
      color: #e0e0e0;
    }

    .data-box span {
      flex: 1;
      text-align: right;
    }

    img.avatar {
      align-self: center;
      border-radius: 50%;
      width: 100px;
      height: 100px;
      object-fit: cover;
      border: 3px solid #4caf50;
      margin: 0 auto 15px;
    }

    .actions {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      justify-content: center;
    }

    .actions button {
      padding: 10px 15px;
      border: none;
      background: #4caf50;
      color: white;
      border-radius: 8px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.2s ease;
      flex: 1;
      min-width: 120px;
    }

    .dark-mode .actions button {
      background: #45a049;
    }

    .actions button:hover {
      background: #45a049;
      transform: translateY(-2px);
    }

    .theme-toggle {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      font-size: 1.2rem;
      cursor: pointer;
    }

    .skeleton {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: skeleton-loading 1.5s infinite;
      border-radius: 8px;
      height: 35px;
      margin-bottom: 10px;
    }

    @keyframes skeleton-loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }

    @media (max-width: 600px) {
      .container {
        padding: 15px;
      }
      h1 {
        font-size: 1.5rem;
      }
      .actions button {
        min-width: 100%;
      }
      .data-box {
        flex-direction: column;
        align-items: flex-start;
      }
      .data-box strong {
        flex: none;
      }
      .data-box span {
        text-align: left;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <button class="theme-toggle" aria-label="Toggle dark mode">🌙</button>
    <h1>Fake Identity Generator</h1>
    <div id="profile" class="card"></div>
    <div class="actions">
      <button onclick="generateProfile()">Generate New Identity</button>
      <button onclick="copyProfile()">Copy All</button>
      <button onclick="downloadProfile()">Download JSON</button>
    </div>
  </div>
  <script>
    let profileData = {};
    let isLoading = false;

    // Debounce API calls
    function debounce(func, wait) {
      let timeout;
      return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    // Sanitize HTML
    function sanitizeHTML(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    }

    // Generate profile
    const generateProfile = debounce(async () => {
      if (isLoading) return;
      isLoading = true;
      showSkeleton();
      try {
        const response = await fetch('https://randomuser.me/api/');
        if (!response.ok) throw new Error('API request failed');
        const data = await response.json();
        const user = data.results[0];
        profileData = {
          name: sanitizeHTML(`${user.name.first} ${user.name.last}`),
          gender: sanitizeHTML(user.gender),
          dob: user.dob.date.split('T')[0],
          age: user.dob.age,
          email: sanitizeHTML(user.email),
          phone: sanitizeHTML(user.phone),
          username: sanitizeHTML(user.login.username),
          address: sanitizeHTML(`${user.location.street.number} ${user.location.street.name}, ${user.location.city}, ${user.location.country} - ${user.location.postcode}`),
          job: getRandomJob(),
          company: getRandomCompany(),
          creditCard: maskCard(user.login.uuid),
          avatar: user.picture.large,
          social: `https://twitter.com/${sanitizeHTML(user.login.username)}`
        };
        displayProfile();
      } catch (error) {
        showToast('Failed to fetch profile. Please try again.');
        console.error(error);
      } finally {
        isLoading = false;
      }
    }, 500);

    function showSkeleton() {
      const profile = document.getElementById('profile');
      profile.innerHTML = `
        <div class="skeleton" style="width: 100px; height: 100px; border-radius: 50%; margin: 0 auto;"></div>
        ${Array(8).fill().map(() => '<div class="skeleton"></div>').join('')}
      `;
    }

    function displayProfile() {
      const profile = document.getElementById('profile');
      profile.innerHTML = `
        <img src="${profileData.avatar}" alt="Profile avatar" class="avatar">
        ${generateDataBox('Name', profileData.name)}
        ${generateDataBox('Gender', profileData.gender)}
        ${generateDataBox('DOB', `${profileData.dob} (${profileData.age} yrs)`)}
        ${generateDataBox('Email', profileData.email)}
        ${generateDataBox('Phone', profileData.phone)}
        ${generateDataBox('Username', profileData.username)}
        ${generateDataBox('Address', profileData.address)}
        ${generateDataBox('Job', profileData.job)}
        ${generateDataBox('Company', profileData.company)}
        ${generateDataBox('Credit Card', profileData.creditCard)}
        ${generateDataBox('Social', profileData.social, true)}
      `;
    }

    function generateDataBox(label, value, isLink = false) {
      const content = isLink ? `<a href="${value}" target="_blank" rel="noopener noreferrer">${value}</a>` : value;
      return `
        <div class="data-box" role="button" tabindex="0" onclick="copyText(this)" onkeydown="if(event.key === 'Enter') copyText(this)">
          <strong>${label}:</strong> <span>${content}</span>
        </div>
      `;
    }

    async function copyText(element) {
      try {
        const text = element.querySelector('span').textContent;
        if (navigator.clipboard) {
          await navigator.clipboard.writeText(text);
        } else {
          // Fallback for older browsers
          const textarea = document.createElement('textarea');
          textarea.value = text;
          document.body.appendChild(textarea);
          textarea.select();
          document.execCommand('copy');
          document.body.removeChild(textarea);
        }
        showToast(`Copied: ${text}`);
      } catch (error) {
        showToast('Failed to copy text');
        console.error(error);
      }
    }

    function copyProfile() {
      try {
        navigator.clipboard.writeText(JSON.stringify(profileData, null, 2));
        showToast('Profile copied to clipboard');
      } catch (error) {
        showToast('Failed to copy profile');
        console.error(error);
      }
    }

    function downloadProfile() {
      const blob = new Blob([JSON.stringify(profileData, null, 2)], { type: 'application/json' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = 'fake_profile.json';
      link.click();
    }

    function getRandomJob() {
      const jobs = ['Software Engineer', 'UI/UX Designer', 'Product Manager', 'Data Scientist', 'Marketing Specialist'];
      return jobs[Math.floor(Math.random() * jobs.length)];
    }

    function getRandomCompany() {
      const companies = ['TechTrend Innovations', 'Quantum Dynamics', 'FutureProof Inc', 'SkyNet Solutions'];
      return companies[Math.floor(Math.random() * companies.length)];
    }

    function maskCard(uuid) {
      return `**** **** **** ${uuid.slice(-4)}`;
    }

    function showToast(message) {
      const toast = document.createElement('div');
      toast.style.position = 'fixed';
      toast.style.bottom = '20px';
      toast.style.right = '20px';
      toast.style.background = '#333';
      toast.style.color = 'white';
      toast.style.padding = '10px 20px';
      toast.style.borderRadius = '8px';
      toast.style.zIndex = '1000';
      toast.textContent = message;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    }

    // Theme toggle
    document.querySelector('.theme-toggle').addEventListener('click', () => {
      document.body.classList.toggle('dark-mode');
      localStorage.setItem('theme', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
      document.querySelector('.theme-toggle').textContent = document.body.classList.contains('dark-mode') ? '☀️' : '🌙';
    });

    // Load saved theme
    if (localStorage.getItem('theme') === 'dark') {
      document.body.classList.add('dark-mode');
      document.querySelector('.theme-toggle').textContent = '☀️';
    }

    // Initial load
    generateProfile();
  </script>
</body>
</html>
<script></script>
</body>
</html>
